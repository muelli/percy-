#!/bin/bash

##  Percy++
##  Copyright 2007 Ian Goldberg <iang@cs.uwaterloo.ca>
##
##  This program is free software; you can redistribute it and/or modify
##  it under the terms of version 2 of the GNU General Public License as
##  published by the Free Software Foundation.
##
##  This program is distributed in the hope that it will be useful,
##  but WITHOUT ANY WARRANTY; without even the implied warranty of
##  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##  GNU General Public License for more details.
##
##  There is a copy of the GNU General Public License in the COPYING file
##  packaged with this plugin; if you cannot find it, write to the Free
##  Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
##  02111-1307  USA

## Sanity tests, from Len Sassaman

## Make sure we've run "make":
if test -e pirclient.cc -a ! -e pirclient -o -e pirclient.cc -a ! -e pirserver
then
   echo "Error:"
   echo "You must build the Percy++ tools before running testclient."
   echo "Please see the README for instructions."
   exit 1
fi

## Make sure we can see the percy tools:
if test ! -e pirclient -o ! -e pirserver
then
   echo "Error:"
   echo "Cannot find local instances of Percy++ tools."
   echo "Percy++ testclient must be invoked in the same directory"
   echo "as the Percy++ tools, usually percy++-(version number)."
   exit 1
fi

## Make sure we can call the percy tools:
if test ! -x pirclient -o ! -x pirserver
then
   echo "Error:"
   echo "Percy++ tools are not executable; please check permissions."
   exit 1
fi

## Remove the database file if it's unreadable
if test -e database -a ! -r database
then
   echo "Removing unreadable database."
   rm -f database
fi

## Create the database if it's not there
if test ! -e database
then
   dd if=/dev/urandom bs=2048 count=1024 of=database
   echo "Created test database."
fi

## Do we have stat(1) at all?
if ! stat --version >/dev/null 2>&1
then
    echo "Error:"
    echo "You must have a working stat(1) to run the Percy++ tools."
    echo "stat(1) can be obtained by building the GNU Coreutils."
    echo "Please see http://www.gnu.org/software/coreutils/ for more info."
    echo ""
    echo "stat(1) does not exist on this system; exiting..."
    exit 1
fi

## What flavour of stat(1) do we have?
if stat --version 2>&1 | grep GNU >/dev/null; then
    stattype=GNU
else
    stattype=BSD
fi

if [ "$1" = "--version" ]
then
    ./pirclient --version 2>&1 | sed 's/pirclient/testclient/' >&2
    exit 0
fi

if [ $# -lt 2 ]; then
    echo "Usage: $0 n t [tau] [hybrid|prime]"
    exit 1
fi

if [ "$3" = "" ]; then
    tau="0"
else
    tau="$3"
fi

if [ "$4" = "hybrid" ]; then
    n=8192
    b=1024
    w=1024
    tot=8
elif [ "$4" = "prime" ]; then
    n=2097152
    b=8192
    w=256
    tot=256
elif [ "$4" = "w128" ]; then
    n=1048576
    b=4096
    w=128
    tot=256
elif [ "$4" = "w8" ]; then
    n=1048576
    b=1024
    w=8
    tot=1024
elif [ "$4" = "gf28" ]; then
    n=1073741824
    b=32768
    w=8
    tot=32768
elif [ "$4" = "w32" ]; then
    n=1048576
    b=2048
    w=32
    tot=512
else
    n=2097152
    b=16384
    w=1024
    tot=128
fi

# Use the following to test two simultaneous block fetches
#block="$[$RANDOM % $tot] $[$RANDOM % $tot]"
block="$[$RANDOM % $tot]"

echo ./pirclient $n $b $w $1 $1 $2 \"$block\" $tau $4
./pirclient $n $b $w $1 $1 $2 "$block" $tau $4 > out.client && \
true > out.real && \
for block0 in $block; do dd if=database bs=$b skip=$block0 count=1 >> out.real 2>/dev/null; done

# Check if any of the blocks output is the right one
if [ "$stattype" = "GNU" ]; then
    totsize=`stat -c %s out.client`
else
    totsize=`stat -f %z out.client`
fi
if [ "$stattype" = "GNU" ]; then
    bsize=`stat -c %s out.real`
else
    bsize=`stat -f %z out.real`
fi
numout=$[$totsize / $bsize]
testblock=0
while [ $testblock -lt $numout ]; do
    if cmp <(dd if=out.client bs=$bsize count=1 skip=$testblock 2>/dev/null) \
    	out.real >/dev/null ; then
	testblock=$[$testblock + 1]
	echo "Success matching output block $testblock of $numout"
	exit 0
    fi
    testblock=$[$testblock + 1]
done
echo "Did not return correct block."
exit 1
